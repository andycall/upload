// Generated by CoffeeScript 1.7.1
var Form, JFUM, createWriteStream, hash, rand;

Form = require('multiparty').Form;

createWriteStream = require('fs').createWriteStream;

hash = require('crypto').createHash;

rand = require('crypto').pseudoRandomBytes;

JFUM = module.exports = function(opts) {
  if (opts == null) {
    opts = {};
  }
  this.tmpDir = opts.tmpDir || require('os').tmpdir();
  this.minFileSize = opts.minFileSize || 204800;
  this.maxFileSize = opts.maxFileSize || 5242880;
  this.acceptFileTypes = opts.acceptFileTypes || /\.(gif|jpe?g|png)$/i;
  return this;
};

JFUM.prototype.optionsHandler = function(req, res, next) {
  res.set({
    'Access-Control-Allow-Methods': 'OPTIONS, POST',
    'Access-Control-Allow-Headers': 'Content-Type'
  });
  return next();
};

JFUM.prototype.postHandler = function(req, res, next) {
  var cnt, done;
  req.jfum = {
    files: []
  };
  cnt = 0;
  done = function(err) {
    if (++cnt === 1) {
      return next(err);
    }
  };
  return new Form().on('error', function(err) {
    req.jfum.error = err.message;
    return done();
  }).on('close', done).on('part', (function(_this) {
    return function(part) {
      var file;
      req.jfum.files.push({
        name: part.filename,
        mime: part.headers['content-type']
      });
      file = req.jfum.files[req.jfum.files.length - 1];
      if (!part.filename || !_this.acceptFileTypes.test(part.filename)) {
        file.error = {
          code: 'JFUM-001',
          msg: 'File type not allowed'
        };
        return part.pipe(createWriteStream('/dev/null').on('error', done));
      }
      file.path = _this.tmpDir + '/jfum-' + hash('sha1').update(rand(128)).digest('hex');
      return part.pipe(createWriteStream(file.path).on('error', done));
    };
  })(this)).parse(req);
};
